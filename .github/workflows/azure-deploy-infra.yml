name: Infra Construction

on:
  workflow_dispatch:

jobs:
  DeployInfra:
    name: Deploy Infra
    if: false
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform binary
        uses: actions/cache@v3
        with:
          path: /usr/bin/terraform
          key: terraform-cache-${{ runner.os }}-${{ hashFiles('**/terraform') }}
          restore-keys: |
            terraform-cache-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false
     
      - name: Update Terraform Setup
        working-directory: Terraform 
        run: |
           sed -i "s|{tmp_subscription_id}|${{ secrets.SUBSCRIPTION_ID }}|g" variables.tfvars
           sed -i "s|{tmp_tenant_id}|${{ secrets.TENANT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" variables.tfvars

           sed -i "s|{tmp_resource_group_name}|${{ secrets.RESOURCE_GROUP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_resource_group_location}|${{ secrets.RESOURCE_GROUP_LOCATION }}|g" variables.tfvars

           sed -i "s|{tmp_storage_account_name}|${{ secrets.STORAGE_ACCOUNT }}|g" variables.tfvars

           sed -i "s|{tmp_function_name}|${{ secrets.FUNCTION_NAME }}|g" variables.tfvars

           sed -i "s|{tmp_cosmos_name}|${{ secrets.COSMOS_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_cosmos_db_name}|${{ secrets.COSMOS_DB_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_cosmos_collection1_name}|${{ secrets.COSMOS_COLLECTION1_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_cosmos_collection2_name}|${{ secrets.COSMOS_COLLECTION2_NAME }}|g" variables.tfvars

      - name: Start Terraform Deploy
        working-directory: Terraform
        run: |
          terraform init
          terraform plan -var-file=variables.tfvars
          terraform apply -auto-approve -var-file=variables.tfvars
          cosmos_cs=$(terraform output -raw cosmos_db_connection_string)
          if [ -z "$cosmos_cs" ]; then
            echo "Error: Cosmos DB connection string is empty!"
            exit 1
          fi
          echo "$cosmos_cs" > ../cosmos_db_connection_string.txt

      - name: Upload Cosmos DB connection string as artifact
        uses: actions/upload-artifact@v3
        with:
          name: cosmos-db-connection-string
          path: cosmos_db_connection_string.txt
          
  ImportDataToMongo:
    name: Import Data
    needs: DeployInfra
    runs-on: ubuntu-latest
    steps:
      - name: Install MongoDB tools
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo tee /etc/apt/trusted.gpg.d/mongodb.asc
          echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt update
          sudo apt install -y mongodb-org-tools

      - name: Download Cosmos DB connection string artifact
        uses: actions/download-artifact@v3
        with:
          name: cosmos-db-connection-string

      - name: Read Cosmos DB connection string from file
        run: |
          COSMOS_DB_CONNECTION_STRING=$(cat cosmos_db_connection_string.txt)
          echo "Using Cosmos DB connection string: $COSMOS_DB_CONNECTION_STRING"
          mongoimport --uri="$COSMOS_DB_CONNECTION_STRING" --db="${{ secrets.COSMOS_DB_NAME }}" --collection="${{ secrets.COSMOS_COLLECTION1_NAME }}" --file=./sample_data/sampleAds.json --jsonArray
