name: Infra Construction

on:
  workflow_dispatch:
  
permissions:
  id-token: write

jobs:
  DeployInfra:
    name: Deploy Infra
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform binary
        uses: actions/cache@v3
        with:
          path: /usr/bin/terraform
          key: terraform-cache-${{ runner.os }}-${{ hashFiles('**/terraform') }}
          restore-keys: |
            terraform-cache-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false
     
      - name: Update Terraform Setup
        working-directory: Terraform 
        run: |
           sed -i "s|{tmp_subscription_id}|${{ secrets.SUBSCRIPTION_ID }}|g" variables.tfvars
           sed -i "s|{tmp_tenant_id}|${{ secrets.TENANT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" variables.tfvars

           sed -i "s|{tmp_resource_group_name}|${{ secrets.RESOURCE_GROUP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_resource_group_location}|${{ secrets.RESOURCE_GROUP_LOCATION }}|g" variables.tfvars

           sed -i "s|{tmp_storage_account_name}|${{ secrets.STORAGE_ACCOUNT }}|g" variables.tfvars

           sed -i "s|{tmp_function_name}|${{ secrets.FUNCTION_NAME }}|g" variables.tfvars

           sed -i "s|{tmp_cosmos_name}|${{ secrets.COSMOS_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_cosmos_db_name}|${{ secrets.COSMOS_DB_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_cosmos_collection1_name}|${{ secrets.COSMOS_COLLECTION1_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_cosmos_collection2_name}|${{ secrets.COSMOS_COLLECTION2_NAME }}|g" variables.tfvars
           
           sed -i "s|{tmp_acr_name}|${{ secrets.ACR_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_aks_name}|${{ secrets.AKS_NAME }}|g" variables.tfvars
           
           sed -i "s|{tmp_app_name_func}|${{ secrets.APP_NAME_FUNC }}|g" variables.tfvars
           sed -i "s|{tmp_app_name_aks}|${{ secrets.APP_NAME_AKS }}|g" variables.tfvars

      - name: Start Terraform Deploy
        working-directory: Terraform
        run: |
          terraform init
          terraform plan -var-file=variables.tfvars
          terraform apply -auto-approve -var-file=variables.tfvars
          cosmos_cs=$(terraform output -raw cosmos_db_connection_string)
          if [ -z "$cosmos_cs" ]; then
            echo "Error: Cosmos DB connection string is empty!"
            exit 1
          fi
          echo "mongoimport --uri=\"$cosmos_cs\" --db=\"${{ secrets.COSMOS_NAME }}\" --collection=\"${{ secrets.COSMOS_COLLECTION1_NAME }}\" --file=./sample_data/sampleAds.json --jsonArray" > ../cosmos_db_data_import.sh
          echo "mongoimport --uri=\"$cosmos_cs\" --db=\"${{ secrets.COSMOS_NAME }}\" --collection=\"${{ secrets.COSMOS_COLLECTION2_NAME }}\" --file=./sample_data/samplePosts.json --jsonArray" >> ../cosmos_db_data_import.sh
          echo "$cosmos_cs" > ../cosmos_db_connection_string.txt

          acr_login_server=$(terraform output -raw acr_login_server)
          if [ -z "$acr_login_server" ]; then
            echo "Error: acr_login_server string is empty!"
            exit 1
          fi
          echo "$acr_login_server" > ../acr_login_server.txt
        
      - name: Upload Cosmos DB Data Import Script as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cosmos-db-data-import-script
          path: cosmos_db_data_import.sh

      
      - name: Upload Cosmos DB connection string as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cosmos-db-and-acr-string
          path: |
            cosmos_db_connection_string.txt
            acr_login_server.txt
          
  ImportDataToMongo:
    name: Import Data
    needs: DeployInfra
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
        
      - name: Install MongoDB tools
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo tee /etc/apt/trusted.gpg.d/mongodb.asc
          echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt update
          sudo apt install -y mongodb-org-tools

      - name: Download Cosmos DB connection string artifact
        uses: actions/download-artifact@v4
        with:
          name: cosmos-db-data-import-script

      - name: Import Data to Cosmos DB
        run: |
          chmod +x cosmos_db_data_import.sh
          sh cosmos_db_data_import.sh

  BuildFunctionAppAndDocker:
    name: Build Function App and Docker Image
    needs: DeployInfra
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Download Cosmos DB connection string artifact
        uses: actions/download-artifact@v4
        with:
          name: cosmos-db-and-acr-string

      - name: Edit parameter
        run: |
          COSMOS_DB_CONNECTION_STRING=$(cat cosmos_db_connection_string.txt)
          ESCAPED_COSMOS_DB_CONNECTION_STRING=$(echo "$COSMOS_DB_CONNECTION_STRING" | sed 's/[&/]/\\&/g')
          cd NeighborlyAPI
          sed -i "s|{tmp_mongodb_connection}|$ESCAPED_COSMOS_DB_CONNECTION_STRING|g" ./createAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_name}|${{ secrets.COSMOS_NAME }}|g" ./createAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_collection1}|${{ secrets.COSMOS_COLLECTION1_NAME }}|g" ./createAdvertisement/__init__.py
          
          sed -i "s|{tmp_mongodb_connection}|$ESCAPED_COSMOS_DB_CONNECTION_STRING|g" ./deleteAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_name}|${{ secrets.COSMOS_NAME }}|g" ./deleteAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_collection1}|${{ secrets.COSMOS_COLLECTION1_NAME }}|g" ./deleteAdvertisement/__init__.py
          
          sed -i "s|{tmp_mongodb_connection}|$ESCAPED_COSMOS_DB_CONNECTION_STRING|g" ./getAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_name}|${{ secrets.COSMOS_NAME }}|g" ./getAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_collection1}|${{ secrets.COSMOS_COLLECTION1_NAME }}|g" ./getAdvertisement/__init__.py
          
          sed -i "s|{tmp_mongodb_connection}|$ESCAPED_COSMOS_DB_CONNECTION_STRING|g" ./getAdvertisements/__init__.py
          sed -i "s|{tmp_mongodb_name}|${{ secrets.COSMOS_NAME }}|g" ./getAdvertisements/__init__.py
          sed -i "s|{tmp_mongodb_collection1}|${{ secrets.COSMOS_COLLECTION1_NAME }}|g" ./getAdvertisements/__init__.py

          sed -i "s|{tmp_mongodb_connection}|$ESCAPED_COSMOS_DB_CONNECTION_STRING|g" ./updateAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_name}|${{ secrets.COSMOS_NAME }}|g" ./updateAdvertisement/__init__.py
          sed -i "s|{tmp_mongodb_collection1}|${{ secrets.COSMOS_COLLECTION1_NAME }}|g" ./updateAdvertisement/__init__.py

          sed -i "s|{tmp_mongodb_connection}|$ESCAPED_COSMOS_DB_CONNECTION_STRING|g" ./getPost/__init__.py
          sed -i "s|{tmp_mongodb_name}|${{ secrets.COSMOS_NAME }}|g" ./getPost/__init__.py
          sed -i "s|{tmp_mongodb_collection2}|${{ secrets.COSMOS_COLLECTION2_NAME }}|g" ./getPost/__init__.py

          sed -i "s|{tmp_mongodb_connection}|$ESCAPED_COSMOS_DB_CONNECTION_STRING|g" ./getPosts/__init__.py
          sed -i "s|{tmp_mongodb_name}|${{ secrets.COSMOS_NAME }}|g" ./getPosts/__init__.py
          sed -i "s|{tmp_mongodb_collection2}|${{ secrets.COSMOS_COLLECTION2_NAME }}|g" ./getPosts/__init__.py

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SP_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
            az storage -h
          
      - name: Build and Upload Docker Image for Deploy
        working-directory: NeighborlyAPI 
        run: |
          ACR_REGISTRY=$(cat ../acr_login_server.txt)
          az acr login --name ${{ secrets.ACR_NAME }}
          docker build -t $ACR_REGISTRY/azure-function:latest .
          docker push $ACR_REGISTRY/azure-function:latest

      - name: Build Func Packages for Deploy 
        run: |
          pushd './NeighborlyAPI'
          python -m pip install --upgrade pip
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"
          zip -r ../release.zip ./* ./.python_packages
          popd

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: './release.zip'
            
  DeployFunctionApp:
    runs-on: ubuntu-latest
    needs: BuildFunctionAppAndDocker
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip     

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SP_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          
      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
            az storage -h
            
      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        id: deploy-to-function
        with:
          app-name: ${{ secrets.FUNCTION_NAME }}
          slot-name: 'Production'
          package: '.'
          scm-do-build-during-deployment: true
          enable-oryx-build: true

  DeployToAks:
    name: Deploy to AKS
    needs: BuildFunctionAppAndDocker
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
        
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SP_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
            az storage -h
            
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
          
      - name: Set up AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --name ${{ secrets.AKS_NAME }} --overwrite-existing

      - name: Deploy to Kubernetes
        working-directory: Kubernetes
        run: |
          sed -i "s|{tmp_acr_name}|${{ secrets.ACR_NAME }}|g" deployment.yaml
          #kubectl set image deployment/azure-function azure-function=$REGISTRY/$IMAGE_NAME:${{ github.sha }} --namespace <namespace> || \
          kubectl apply -f ./deployment.yaml
          kubectl apply -f ./service.yaml

  BuildFrontEndFunc:
    name: Build Frontend App With Function APP 
    needs: DeployInfra
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Update Parameter in APP Config
        working-directory: NeighborlyFrontEnd 
        run: |
          ESCAPED_API_URL=$(echo "https://${{ secrets.FUNCTION_NAME }}.azurewebsites.net/api/" | sed 's/[&/]/\\&/g')
          sed -i "s|{tmp_api_url}|$ESCAPED_API_URL|g" ./settings.py

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        working-directory: NeighborlyFrontEnd 
        run: pip install -r requirements.txt
        
      - name: Zip artifact for deployment
        working-directory: NeighborlyFrontEnd 
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: frontend-app
          path: |
            ./NeighborlyFrontEnd/release.zip
            !venv/

  DeployFrontEndFunc:
    name: Deploy Frontend App With Function APP 
    needs: BuildFrontEndFunc
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: frontend-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SP_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: ${{ secrets.APP_NAME }}
          slot-name: 'Production'
